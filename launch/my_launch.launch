<?xml version="1.0" ?>

<launch>

  <!-- This file provides an example for launching a Thorvald robot.
       Copy this file, together with any config files you wish to edit, to your own package before editing. -->


  <!-- Robot name and tf prefix -->
  <arg name="robot_name" default="" />
  <arg name="tf_prefix" default="" />

  <!--Â Path to tobot configuration file
       This file list modules on a given robot with key parameters like position in the base_link frame, gear ratios, etc.
       The robot description is then automatically generated from this file.
       Many examples are found in the thorvald_description package -->
  <arg name="robot_model" default="$(find my_own_thorvald)/config/thorvald_ii_4wd4ws_std.yaml" />

  <!-- Path to model extras xacro file
       This file is used to define any mesh or tfs that are not automatically generated from the robot configuration file
       Examples include sensors and custom frame members
       Leave empty if no additional tfs or meshers are required -->
  <arg name="model_extras" default="$(find my_own_thorvald)/urdf/sensor_frames_example.xacro" />

  <!-- Simulated or real robot.
       If set to True, the base driver node will simulate motor feedback. -->
  <arg name="simple_sim" default="True" />

  <!-- Base odometry frame args
       If enable_odom_tf is true, the base driver node will broadcast a transform between the odometry frame and the base_link frame
       odom_frame_id sets the name of the odometry frame used in tf broadcast and odometry topic. -->
  <arg name="enable_odom_tf" default="True" />
  <arg name="odom_frame_id" default="odom" />

  <!-- Twist mux args
       twist and lock topics to be used by twist_mux, command multiplexer -->
  <arg name="twist_mux_topics" value="$(find my_own_thorvald)/config/twist_mux_topics.yaml" />
  <arg name="twist_mux_locks" value="$(find my_own_thorvald)/config/twist_mux_locks.yaml" />

  <!-- Teleop args
       The teleop node can be used with different hardware, and can also be configured to call any number of std_srvs/Trigger services.
       You can use xbox.yaml from thorvald_teleop as an example when configuring your own controller -->
  <arg name="joy_dev" default="/dev/input/js0" />
  <arg name="joy_autorepeat_rate" value="20" />
  <arg name="joy_deadzone" value="0.2" />
  <arg name="teleop_controller" value="$(find my_own_thorvald)/config/xbox.yaml" />





  <!-- Thorvald bringup -->
  <include file="$(find thorvald_bringup)/launch/thorvald_bringup.launch">
    <arg name="robot_name" value="$(arg robot_name)" />
    <arg name="tf_prefix" value="$(arg tf_prefix)" />
    <arg name="robot_model" value="$(arg robot_model)" />
    <arg name="model_extras" value="$(arg model_extras)" />
    <arg name="simple_sim" value="$(arg simple_sim)" />
    <arg name="enable_odom_tf" default="$(arg enable_odom_tf)" />
    <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
  </include>


  <!-- Twist mux bringup -->
  <include file="$(find thorvald_twist_mux)/launch/twist_mux.launch">
    <arg name="config_topics" value="$(arg twist_mux_topics)" />
    <arg name="config_locks" value="$(arg twist_mux_locks)" />
  </include>


  <!-- Teleop bringup -->
  <include file="$(find thorvald_teleop)/launch/teleop.launch">
    <arg name="joy_dev" value="$(arg joy_dev)" />
    <arg name="joy_autorepeat_rate" value="$(arg joy_autorepeat_rate)" />
    <arg name="joy_deadzone" value="$(arg joy_deadzone)" />
    <arg name="teleop_controller" value="$(arg teleop_controller)" />
  </include>



</launch>
